# 局部变量与全局变量
# 局部变量：是在函数内部定义的变量，只能在函数内部使用
#全局变量：是在函数外部定义的遍历（没有定义在某个函数内），所有函数内部都可以使用这个变量
# 在其他开发语言中，大多不推荐使用全局变量使用--可变范围太大，导致程序不好维护

# 局部变量
# 局部变量是在函数内部定义的遍历，只能在函数内部使用
# 函数执行结束后，函数内部的局部变量，会被系统回收
# 不同的函数，可以定义相同名字的局部变量，但是各用个的不会产生影响

def demo1():
    # 定义一个局部变量
    # >出生;在执行以下代码后，才会被创建
    # >函数执行完毕，变量死亡
    num = 10
    print("在demo函数内部的变量是 %d" %num)

# print("%d" %num) 函数内部定义的变量，不可再其他地方使用NameError: name 'num' is not defined
def demo2():
    num = 99
    print("demo2==>%d" %num)
    pass
demo1()
demo2()

# 局部变量的生命周期
# 所谓生命周期，就是变量从被创建到北系统回收的过程
# 局部变量在函数执行时才会被创建
# 函数执行结束后，局部变量才会被回收

#
# # 全局变量
# num3 = 10
# def demo3():
#     print("全局变量demo3==>%d" %num3)
# def demo4():
#     print("全局变量demo4==>%d" %num3)
# demo3()
# demo4()

# pycharm单步跟踪技巧
# 左侧，<modele>. hm.py 2--正准备执行的代码

# 全局变量

# num4 = 10
# def demo5():
#     # 希望修改全局变量的值：函数内部
#     # python中，是不允许直接修改全局变量的值
#     # 如果使用赋值语句，会在函数内部定义一个局部变量
#     num4 = 99
#     print("全局变量demo3==>%d" %num4)
# def demo6():
#     print("全局变量demo4==>%d" %num4)
# demo5()
# demo6()

# 函数内修改全局变量。global
# num5 = 10
# def demo7():
#     # 如果希望修改全局变量的值，使用global声明一下变量即可.高亮
#     # global关键字会告诉解释器后面的变量是一个全局变量
#     # 在使用赋值有乬时，就不会创建局部变量
#     global num5
#     num5 = 99
#     print("全局变量demo7==>%d" % num5)
# def demo8():
#     print("全局变量demo8==>%d" % num5)
# demo7()
# demo8()

# 全局变量的位置
# 注意；在开发时，应该把模块中的所有全局变量
# 定义在所有函数上方
gl_num6 = 10
gl_name = "xiaomign"
def demo9():
     num6 =999
     # 如果局部变量名字和全局变量相同
     # pycharm会在局部变量下会有灰色虚线

     print("%d " %gl_num6)
     print("%s" %gl_title)
     print("%s" %gl_name)
#      再定义一个全局变量
gl_title = "黑马恒需要"

demo9()

# # 再定义一个全局变量：这个在函数下，无法使用
# name = "xiaomign"


# 整体结构：
# shabang  #!
# import 模块
# 全局变量
# 函数定义
# 执行代码


# 全局变量命名的建议
# 为了避免局部变量和全局变量出现混淆，在订阅全局变量时，有些公司有一些要求
# 全局变量名前应该增加 g_ 或者gl_ 的前缀


