# def test(num):
#     pass
#     print("在函数内部 %d 对应的内存地址是%d"%(num,id(num)))
# #     2定义一个字符串变量
#     result = "hello"
#     print("函数要返回数据（hello）的内存地址是 %d" %id(result))
# # 2-2将 字符串返回
#     return  result
# # 1、定义一个数字的变量
#
# a= 10
# # 数据的地址本质是一个数字
# print("a 遍历数据保存的地址是 %d" %id(a))
# # 2、调用testh函数
# # 注意，如果函数有返回值，但没有定义变量接收，
# # 程序不会报错，但是无法获取返回结果
# # test(a)
# r = test(a)
# # 调用test函数，本质上传递的是实参保存数据的引用，而不是实参保存的数据
# print("%s 的内存地址是 %d" %(r,id(r)))

# 可变类型和不可变类型
# 列表
# a = [1,3,2]
# print("数组a:",a,"遍历数据保存的地址是 %d" %id(a))
# a.append(999)
# a.remove(2)
# print("数组a:",a,"遍历数据保存的地址是 %d" %id(a))
# a.clear()
# print("数组a:",a,"遍历数据保存的地址是 %d" %id(a))
# a=[2,3]
# print("数组a:",a,"新赋值后遍历数据保存的地址是 %d" %id(a))
# 字典
# d = {"name":"xiaoming"}
# # 可变类型的数据变化，是通过方法来实现的
# # 如果给一个可变类型额变量，赋值一个新的数据，引用会修改
# # 变量不再对之前的数据引用、变量改为对新赋值的数据的引用
# print("字典d:",d,"遍历数据保存的地址是 %d" %id(d))
# d["age"] = 18
# print("字典d:",d,"遍历数据保存的地址是 %d" %id(d))
# d.pop("age")
# print("字典d:",d,"遍历数据保存的地址是 %d" %id(d))
# d.clear()
# print("字典d:",d,"遍历数据保存的地址是 %d" %id(d))
# d={}
# print("字典d:",d,"遍历数据保存的地址是 %d" %id(d))

# 字典的key不能是可变类型:数字，字符串，元组
d1 ={}
d1["name"] = "xiaoming"
d1[1]="整数"
d1[(1,)] = "元组"
# 不能使用列表和字典作为key
# d1[[1,2]] = "列表"
# d1[{1:"123"}] = "字典"

print("字典d1:",d1,"遍历数据保存的地址是 %d" %id(d1))

# 哈希 TypeError: unhashable type: 'dict'
# 内置hash(o)函数：接收一个 不可变类型 的数据，作为参数
# 返回结果时一个整数
# 哈希是一种算法，作用就是提取数据的 特征码（指纹）
# 相同的内容得到相同的结果；不同的内容得到不同的结果

print(hash(1))
print(hash("hello"))
print(hash("hello"))
print(hash("hello1"))
print(hash((1,)))
# print(hash({})) 列表与字典不可用
#
# 在python中，设置字典的 键值对 时，会首先对 key  进行hash。已决定如何在内测中保存字典的数据，以方便
# 后续对字典的操作：增，删，改，查

# 键值对的key必须 是不可变类型的数据、键值对的value可是任意类型的数据